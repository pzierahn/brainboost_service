// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: notion.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Notion_SetApiKey_FullMethodName     = "/chatbot.notion.v1.Notion/SetApiKey"
	Notion_RemoveApiKey_FullMethodName  = "/chatbot.notion.v1.Notion/RemoveApiKey"
	Notion_GetApiKey_FullMethodName     = "/chatbot.notion.v1.Notion/GetApiKey"
	Notion_ListDatabases_FullMethodName = "/chatbot.notion.v1.Notion/ListDatabases"
	Notion_ExecutePrompt_FullMethodName = "/chatbot.notion.v1.Notion/ExecutePrompt"
)

// NotionClient is the client API for Notion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotionClient interface {
	SetApiKey(ctx context.Context, in *NotionApiKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NotionApiKey, error)
	ListDatabases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Databases, error)
	ExecutePrompt(ctx context.Context, in *NotionPrompt, opts ...grpc.CallOption) (Notion_ExecutePromptClient, error)
}

type notionClient struct {
	cc grpc.ClientConnInterface
}

func NewNotionClient(cc grpc.ClientConnInterface) NotionClient {
	return &notionClient{cc}
}

func (c *notionClient) SetApiKey(ctx context.Context, in *NotionApiKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Notion_SetApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notionClient) RemoveApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Notion_RemoveApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notionClient) GetApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NotionApiKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotionApiKey)
	err := c.cc.Invoke(ctx, Notion_GetApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notionClient) ListDatabases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Databases, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Databases)
	err := c.cc.Invoke(ctx, Notion_ListDatabases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notionClient) ExecutePrompt(ctx context.Context, in *NotionPrompt, opts ...grpc.CallOption) (Notion_ExecutePromptClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Notion_ServiceDesc.Streams[0], Notion_ExecutePrompt_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &notionExecutePromptClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notion_ExecutePromptClient interface {
	Recv() (*ExecutionResult, error)
	grpc.ClientStream
}

type notionExecutePromptClient struct {
	grpc.ClientStream
}

func (x *notionExecutePromptClient) Recv() (*ExecutionResult, error) {
	m := new(ExecutionResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotionServer is the server API for Notion service.
// All implementations must embed UnimplementedNotionServer
// for forward compatibility
type NotionServer interface {
	SetApiKey(context.Context, *NotionApiKey) (*emptypb.Empty, error)
	RemoveApiKey(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetApiKey(context.Context, *emptypb.Empty) (*NotionApiKey, error)
	ListDatabases(context.Context, *emptypb.Empty) (*Databases, error)
	ExecutePrompt(*NotionPrompt, Notion_ExecutePromptServer) error
	mustEmbedUnimplementedNotionServer()
}

// UnimplementedNotionServer must be embedded to have forward compatible implementations.
type UnimplementedNotionServer struct {
}

func (UnimplementedNotionServer) SetApiKey(context.Context, *NotionApiKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApiKey not implemented")
}
func (UnimplementedNotionServer) RemoveApiKey(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApiKey not implemented")
}
func (UnimplementedNotionServer) GetApiKey(context.Context, *emptypb.Empty) (*NotionApiKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKey not implemented")
}
func (UnimplementedNotionServer) ListDatabases(context.Context, *emptypb.Empty) (*Databases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedNotionServer) ExecutePrompt(*NotionPrompt, Notion_ExecutePromptServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecutePrompt not implemented")
}
func (UnimplementedNotionServer) mustEmbedUnimplementedNotionServer() {}

// UnsafeNotionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotionServer will
// result in compilation errors.
type UnsafeNotionServer interface {
	mustEmbedUnimplementedNotionServer()
}

func RegisterNotionServer(s grpc.ServiceRegistrar, srv NotionServer) {
	s.RegisterService(&Notion_ServiceDesc, srv)
}

func _Notion_SetApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotionApiKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotionServer).SetApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notion_SetApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotionServer).SetApiKey(ctx, req.(*NotionApiKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notion_RemoveApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotionServer).RemoveApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notion_RemoveApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotionServer).RemoveApiKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notion_GetApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotionServer).GetApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notion_GetApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotionServer).GetApiKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notion_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotionServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notion_ListDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotionServer).ListDatabases(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notion_ExecutePrompt_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotionPrompt)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotionServer).ExecutePrompt(m, &notionExecutePromptServer{ServerStream: stream})
}

type Notion_ExecutePromptServer interface {
	Send(*ExecutionResult) error
	grpc.ServerStream
}

type notionExecutePromptServer struct {
	grpc.ServerStream
}

func (x *notionExecutePromptServer) Send(m *ExecutionResult) error {
	return x.ServerStream.SendMsg(m)
}

// Notion_ServiceDesc is the grpc.ServiceDesc for Notion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatbot.notion.v1.Notion",
	HandlerType: (*NotionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetApiKey",
			Handler:    _Notion_SetApiKey_Handler,
		},
		{
			MethodName: "RemoveApiKey",
			Handler:    _Notion_RemoveApiKey_Handler,
		},
		{
			MethodName: "GetApiKey",
			Handler:    _Notion_GetApiKey_Handler,
		},
		{
			MethodName: "ListDatabases",
			Handler:    _Notion_ListDatabases_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecutePrompt",
			Handler:       _Notion_ExecutePrompt_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notion.proto",
}
