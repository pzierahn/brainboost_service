// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: braingain.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Brainboost_Chat_FullMethodName             = "/endpoint.brainboost.v1.Brainboost/Chat"
	Brainboost_GetChatMessages_FullMethodName  = "/endpoint.brainboost.v1.Brainboost/GetChatMessages"
	Brainboost_GetChatMessage_FullMethodName   = "/endpoint.brainboost.v1.Brainboost/GetChatMessage"
	Brainboost_ListDocuments_FullMethodName    = "/endpoint.brainboost.v1.Brainboost/ListDocuments"
	Brainboost_IndexDocument_FullMethodName    = "/endpoint.brainboost.v1.Brainboost/IndexDocument"
	Brainboost_DeleteDocument_FullMethodName   = "/endpoint.brainboost.v1.Brainboost/DeleteDocument"
	Brainboost_UpdateDocument_FullMethodName   = "/endpoint.brainboost.v1.Brainboost/UpdateDocument"
	Brainboost_GetCollections_FullMethodName   = "/endpoint.brainboost.v1.Brainboost/GetCollections"
	Brainboost_CreateCollection_FullMethodName = "/endpoint.brainboost.v1.Brainboost/CreateCollection"
	Brainboost_UpdateCollection_FullMethodName = "/endpoint.brainboost.v1.Brainboost/UpdateCollection"
	Brainboost_DeleteCollection_FullMethodName = "/endpoint.brainboost.v1.Brainboost/DeleteCollection"
	Brainboost_GetModelUsages_FullMethodName   = "/endpoint.brainboost.v1.Brainboost/GetModelUsages"
)

// BrainboostClient is the client API for Brainboost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrainboostClient interface {
	Chat(ctx context.Context, in *Prompt, opts ...grpc.CallOption) (*ChatMessage, error)
	GetChatMessages(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*ChatMessages, error)
	GetChatMessage(ctx context.Context, in *MessageID, opts ...grpc.CallOption) (*ChatMessage, error)
	ListDocuments(ctx context.Context, in *DocumentFilter, opts ...grpc.CallOption) (*Documents, error)
	IndexDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (Brainboost_IndexDocumentClient, error)
	DeleteDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCollections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Collections, error)
	CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetModelUsages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelUsages, error)
}

type brainboostClient struct {
	cc grpc.ClientConnInterface
}

func NewBrainboostClient(cc grpc.ClientConnInterface) BrainboostClient {
	return &brainboostClient{cc}
}

func (c *brainboostClient) Chat(ctx context.Context, in *Prompt, opts ...grpc.CallOption) (*ChatMessage, error) {
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, Brainboost_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) GetChatMessages(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*ChatMessages, error) {
	out := new(ChatMessages)
	err := c.cc.Invoke(ctx, Brainboost_GetChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) GetChatMessage(ctx context.Context, in *MessageID, opts ...grpc.CallOption) (*ChatMessage, error) {
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, Brainboost_GetChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) ListDocuments(ctx context.Context, in *DocumentFilter, opts ...grpc.CallOption) (*Documents, error) {
	out := new(Documents)
	err := c.cc.Invoke(ctx, Brainboost_ListDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) IndexDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (Brainboost_IndexDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &Brainboost_ServiceDesc.Streams[0], Brainboost_IndexDocument_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &brainboostIndexDocumentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Brainboost_IndexDocumentClient interface {
	Recv() (*IndexProgress, error)
	grpc.ClientStream
}

type brainboostIndexDocumentClient struct {
	grpc.ClientStream
}

func (x *brainboostIndexDocumentClient) Recv() (*IndexProgress, error) {
	m := new(IndexProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brainboostClient) DeleteDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Brainboost_DeleteDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Brainboost_UpdateDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) GetCollections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Collections, error) {
	out := new(Collections)
	err := c.cc.Invoke(ctx, Brainboost_GetCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Brainboost_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) UpdateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Brainboost_UpdateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) DeleteCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Brainboost_DeleteCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainboostClient) GetModelUsages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelUsages, error) {
	out := new(ModelUsages)
	err := c.cc.Invoke(ctx, Brainboost_GetModelUsages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrainboostServer is the server API for Brainboost service.
// All implementations must embed UnimplementedBrainboostServer
// for forward compatibility
type BrainboostServer interface {
	Chat(context.Context, *Prompt) (*ChatMessage, error)
	GetChatMessages(context.Context, *Collection) (*ChatMessages, error)
	GetChatMessage(context.Context, *MessageID) (*ChatMessage, error)
	ListDocuments(context.Context, *DocumentFilter) (*Documents, error)
	IndexDocument(*Document, Brainboost_IndexDocumentServer) error
	DeleteDocument(context.Context, *Document) (*emptypb.Empty, error)
	UpdateDocument(context.Context, *Document) (*emptypb.Empty, error)
	GetCollections(context.Context, *emptypb.Empty) (*Collections, error)
	CreateCollection(context.Context, *Collection) (*emptypb.Empty, error)
	UpdateCollection(context.Context, *Collection) (*emptypb.Empty, error)
	DeleteCollection(context.Context, *Collection) (*emptypb.Empty, error)
	GetModelUsages(context.Context, *emptypb.Empty) (*ModelUsages, error)
	mustEmbedUnimplementedBrainboostServer()
}

// UnimplementedBrainboostServer must be embedded to have forward compatible implementations.
type UnimplementedBrainboostServer struct {
}

func (UnimplementedBrainboostServer) Chat(context.Context, *Prompt) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedBrainboostServer) GetChatMessages(context.Context, *Collection) (*ChatMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedBrainboostServer) GetChatMessage(context.Context, *MessageID) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessage not implemented")
}
func (UnimplementedBrainboostServer) ListDocuments(context.Context, *DocumentFilter) (*Documents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedBrainboostServer) IndexDocument(*Document, Brainboost_IndexDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method IndexDocument not implemented")
}
func (UnimplementedBrainboostServer) DeleteDocument(context.Context, *Document) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedBrainboostServer) UpdateDocument(context.Context, *Document) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedBrainboostServer) GetCollections(context.Context, *emptypb.Empty) (*Collections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedBrainboostServer) CreateCollection(context.Context, *Collection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedBrainboostServer) UpdateCollection(context.Context, *Collection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedBrainboostServer) DeleteCollection(context.Context, *Collection) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedBrainboostServer) GetModelUsages(context.Context, *emptypb.Empty) (*ModelUsages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelUsages not implemented")
}
func (UnimplementedBrainboostServer) mustEmbedUnimplementedBrainboostServer() {}

// UnsafeBrainboostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrainboostServer will
// result in compilation errors.
type UnsafeBrainboostServer interface {
	mustEmbedUnimplementedBrainboostServer()
}

func RegisterBrainboostServer(s grpc.ServiceRegistrar, srv BrainboostServer) {
	s.RegisterService(&Brainboost_ServiceDesc, srv)
}

func _Brainboost_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prompt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).Chat(ctx, req.(*Prompt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_GetChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).GetChatMessages(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_GetChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).GetChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_GetChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).GetChatMessage(ctx, req.(*MessageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).ListDocuments(ctx, req.(*DocumentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_IndexDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Document)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrainboostServer).IndexDocument(m, &brainboostIndexDocumentServer{stream})
}

type Brainboost_IndexDocumentServer interface {
	Send(*IndexProgress) error
	grpc.ServerStream
}

type brainboostIndexDocumentServer struct {
	grpc.ServerStream
}

func (x *brainboostIndexDocumentServer) Send(m *IndexProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _Brainboost_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).DeleteDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).UpdateDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_GetCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).GetCollections(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).CreateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_UpdateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).UpdateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).DeleteCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brainboost_GetModelUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainboostServer).GetModelUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Brainboost_GetModelUsages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainboostServer).GetModelUsages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Brainboost_ServiceDesc is the grpc.ServiceDesc for Brainboost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Brainboost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endpoint.brainboost.v1.Brainboost",
	HandlerType: (*BrainboostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _Brainboost_Chat_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _Brainboost_GetChatMessages_Handler,
		},
		{
			MethodName: "GetChatMessage",
			Handler:    _Brainboost_GetChatMessage_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _Brainboost_ListDocuments_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _Brainboost_DeleteDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _Brainboost_UpdateDocument_Handler,
		},
		{
			MethodName: "GetCollections",
			Handler:    _Brainboost_GetCollections_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _Brainboost_CreateCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _Brainboost_UpdateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _Brainboost_DeleteCollection_Handler,
		},
		{
			MethodName: "GetModelUsages",
			Handler:    _Brainboost_GetModelUsages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IndexDocument",
			Handler:       _Brainboost_IndexDocument_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "braingain.proto",
}
